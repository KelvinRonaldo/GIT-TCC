import React, { Component, Fragment } from 'react';
import '../css/perfil-pro.css';
import '../css/bootstrap.css';
import '../css/padroes.css';
import io from "socket.io-client";
import $ from 'jquery';
import AvaliacaoPro from '../components/AvaliacaoPro';
import CapaPerfilPro from '../components/CapaPerfilPro';
import Edit from '../img/edit.png';
import Save from '../img/save.png';
import SaveDisabled from '../img/save-disabled.png';
import Cancel from '../img/cancel.png';
import axios from 'axios';
import { verificarLogado, getToken, getUsuarioPro, getUpdatedPro } from '../utils/verificaSessionStrg';
import { Route, browserHistory } from 'react-router';
// import { DadosProfissional } from '../components/FormularioProfissional';
import {Inputs, Selects, InputNumber} from '../components/FormElements';
import { BotaoImg } from '../components/Botao';
import { ModalLoadConst, ModalAlertas} from '../components/ModaisLoad';
import { DOMINIO } from '../global';
import { validarConfirmacaoSenha, moveToError, generateHash, withError,
         withoutError, validarCnpj, validarCpfPro, validarEmail,
         validarSenha, validarString, validarVazios, retirarSimbolos,
         formataData, limpaValor, validarIdade} from '../js/validar';

let BUSCAR = false;


class PerfilPro extends Component{


    constructor() {
        super();
        this.state = {
            nomePro: "", servicoPro: "",
            localPro: "", notaPro: "",
            valorPro: "", fotoPro: "",
            iconEdit: Edit, 
            iconSave: SaveDisabled,
            atualizar: false,
            erros: [],
            tipoAlerta: "",
            tituloAlerta: "",
            showModalErro: false,
            vouTestar: false,
            loading: false,

            // *******************************************
            nome: "", dataNasc: "", cpf: "", cnpj: "", cpfCnpj: "",
            email: "", senha: "", confirmSenha: "",
            loading: false,
            showModalErro: false,
            erros: [],
            
            cep: "", logradouro: "", idCidade: "",
            bairro: "", cidade: "", uf: "", subcategoria: "",
            tipoPro: "rdo-pf", radioChecked: "rdo-pf",
            endereco: [], profissional: [],
            // *******************************************



            // *******************************************
            categorias: [],
            idCategoria: "",
            subcategorias: [],
            idSubcategoria: "",
            valorHora: "",
            qualificacoes: "",
            // *******************************************
        }
        this.enableFields = this.enableFields.bind(this);
        this.setOriginalData = this.setOriginalData.bind(this);
        this.setPro = this.setPro.bind(this);
        this.validarCampos = this.validarCampos.bind(this);
        this.chamar = this.chamar.bind(this);
        
        this.ModalAlertas = this.ModalAlertas.bind(this);
        this.mostrarAlerta = this.mostrarAlerta.bind(this);
        
        
        // *******************************************
        this.modalLoad = this.modalLoad.bind(this);
        this.noConnection = this.noConnection.bind(this);
        this.jaCadastrado = this.jaCadastrado.bind(this);
        
        this.setNome = this.setNome.bind(this);
        this.setCep = this.setCep.bind(this);
        this.setEmail = this.setEmail.bind(this);
        this.setSenha = this.setSenha.bind(this);
        this.setConfirmSenha = this.setConfirmSenha.bind(this);
        this.setCpfCnpj = this.setCpfCnpj.bind(this);
        this.setTipoPfPj = this.setTipoPfPj.bind(this);
        this.setData = this.setData.bind(this);
        this.preencherCampos = this.preencherCampos.bind(this);
        
        this.getCpf = this.getCpf.bind(this);
        this.getCnpj = this.getCnpj.bind(this);
        this.getEmail = this.getEmail.bind(this);
        // *******************************************


        // *******************************************
        this.getCategorias = this.getCategorias.bind(this);
        this.getSubcategorias = this.getSubcategorias.bind(this);
        this.setValorHora = this.setValorHora.bind(this);
        this.preencherCamposServico = this.preencherCamposServico.bind(this);
        // *******************************************
    }


    jaCadastrado(tipo, input, elemento){
        withError(elemento);
        let erros = [];
        erros.push(`${tipo} ${input} ja cadastrado`);
        this.setState({erros: erros});
        setTimeout(()=>{this.mostrarAlerta("alertaAlt", "PROBLEMA NA ATUALIZAÇÃO");}, 500);
    }

    //MOSTRA ALERTA SE ÃO HOUVER CONEXAÃO COM O SERVIDOR
    noConnection(){
        let erros = [`Não foi possível obter resposta do servidor. Tente novamente mais tarde.`];
        this.setState({erros: erros});
        setTimeout(()=>{this.mostrarAlerta("erroAlt", "ERRO");}, 500);
    }

    //CONTROLA CAIXA DE LOAD
    modalLoad = () =>{
        if(!this.state.loading){
            $("body").css("overflow-y", "hidden");
        }else{
            // $("body").css("padding-right", "35px");
            $("body").css("overflow-y", "auto");
        }
        this.setState({loading: !this.state.loading});
    }

    mostrarAlerta(tipoAlerta, tituloAlerta){
        this.setState({tipoAlerta: tipoAlerta});
        this.setState({tituloAlerta: tituloAlerta});
        setTimeout(()=>{this.ModalAlertas()}, 200);
    }

    ModalAlertas = () =>{
        if(!this.state.showModalErro){
            $("body").css("overflow-y", "hidden");
        }else{
            $("body").css("overflow-y", "auto");
        }
        this.setState({showModalErro: !this.state.showModalErro});
    }

    componentDidMount(){
        // this.preencherCampos();
        verificarLogado();
        console.log("vai setar os dados");
        this.enableFields(true);
        console.log("********")
        console.log(this.state.atualizar);
    }

    setOriginalData(pro){
        let localPro = `${pro.endereco.cidade.cidade}, ${pro.endereco.cidade.microrregiao.uf.estado} - ${pro.endereco.cidade.microrregiao.uf.uf}`
        let valorHora = pro.valorHora.toString();

        valorHora = valorHora.includes(".") ? valorHora.replace(".", ",") : valorHora+",00";

        if(pro !== null && pro !== ""){
            this.setState({nomePro: pro.nome});
            this.setState({servicoPro: pro.subcategoria.subcategoria});
            this.setState({localPro: localPro});
            this.setState({valorPro: valorHora});
            this.setState({fotoPro: "url(https://images.pexels.com/photos/2760241/pexels-photo-2760241.jpeg?auto=compress&cs=tinysrgb&dpr=3&h=750&w=1260)"});
        }
    }

    enableFields(preencher){
        if(this.state.atualizar){
            console.log("a partir de agora SALVA");
            this.setState({iconEdit: Cancel});
            this.setState({iconSave: Save});
            $("input, select, textarea").removeAttr("disabled");
            $("input, select, textarea").css("background-color", "#88ffcc");
            // $("input, select, textarea").css("background-color", "#CCE5E9");
            $("#text-atualizar-perfil").css("background-color", "#ebebeb");
            $("#text-atualizar-perfil").removeAttr("disabled");
            $("#img-editar-perfil").attr("alt", "Cancelar");
            $("#img-editar-perfil").attr("title", "Cancelar");
        }else{
            console.log("a partir de agora NAO SALVA");
            this.setState({iconEdit: Edit});
            $("input, select, textarea").attr("disabled", "disabled");
            $("input, select, textarea").css("background-color", "#d5d5d5");
            $("#text-atualizar-perfil").css("background-color", "#d2d2d2");
            $("#text-atualizar-perfil").attr("disabled", "disabled");
            this.setOriginalData(getUsuarioPro());

            if(preencher){
                console.log("-------<<<"+preencher);
                this.preencherCampos();
                this.preencherCamposServico();
            }
        }
        this.setState({atualizar: !this.state.atualizar});
    }

    chamar(){
        // if(BUSCAR === true){
            console.log("----------");
            withoutError($("input, select"));
            this.enableFields(true);
            // this.preencherCampos();
        // }else if(BUSCAR === false){
        //     this.enableFields(false);
        // }
        BUSCAR = !BUSCAR;

    }

    validarCampos(){
        let campos = document.querySelectorAll("input[type=InputNumber], input[type=text], input[type=email], select");
        let semErro = true;
        let erros = [];

        if(!validarVazios(campos)){
            semErro = false;
            erros.push("Há campos não preenchidos!\n");
            console.log("validarVazios "+semErro);
        }

        if(!validarString($('#txt-nome').get(0))){
            semErro = false;
            erros.push("O Nome digitado é inválido!\n");
            console.log("validarString nome "+semErro);
        }

        if(!validarIdade($('#txt-dataNasc').get(0))){
            semErro = false;
            erros.push("Para ser cadastrar é necessário ter no mínimo 18 anos!\n");
            console.log("validarIdade "+semErro);
        }

        if($('.caixa-cpfCnpj').text() === "CPF"){
            if(!validarCpfPro($('#txt-cpfCnpj').val())){
                semErro = false;
            erros.push("CPF Inválido\n");
                console.log("validarCpfPro "+semErro);
            }
        }else{
            if(!validarCnpj($('#txt-cpfCnpj').val())){
                semErro = false;
                erros.push("CNPJ Inválido\n");
                console.log("validarCnpj "+semErro);
            } 
        }

        if(!validarEmail($('#txt-email').get(0))){
            semErro = false;
            erros.push("E-mail digitado não é válido\n");
            console.log("validarEmail "+semErro);
        }

        // if(!validarSenha($('#txt-senha').val())){
        //     semErro = false;
        //     erros.push("A senha deve ter letras maiúsculas e minúsculas, números, símbolos(@#$...), ter no mínimo 8 caractéres e não pode conter espaços");
        //     console.log("validarSenha "+semErro);
        // }

        // if(!validarConfirmacaoSenha($('#txt-senha').get(0), $('#txt-confirmar-senha').get(0))){
        //     semErro = false;
        //     erros.push("As senhas não correspondem!\n");
        //     console.log("validarConfirmacaoSenha "+semErro);
        // }

        this.setState({erros: erros});
        erros = [];
        return semErro;
    }
    
    setPro(event){
        event.preventDefault();
        let cpfCnpj = $("#txt-cpfCnpj").val().replace(/[.-]/g, "");
        let cpf;
        let cnpj;
        if(cpfCnpj.length <= 14){
            cpf = retirarSimbolos(cpfCnpj);
            cnpj = null;
        }else{
            cnpj = retirarSimbolos(cpfCnpj);
            cpf = null;
        }
        console.log(limpaValor($("#txt-valor-hora").val()));
        if(this.validarCampos()){
            let endereco = {
                idEndereco: getUsuarioPro().endereco.idEndereco,
                cep: retirarSimbolos($("#txt-cep").val()),
                logradouro: $("#txt-logradouro").val(),
                bairro: $("#txt-bairro").val(),
                numero: null,
                cidade: {
                    idCidade: $("#txt-cidade").attr("data-idCidade")
                }
            };
            let profissional = {
                idProfissional: getUsuarioPro().idProfissional,
                nome: $("#txt-nome").val(),
                dataNasc: formataData($("#txt-dataNasc").val(), "/", "-"),
                cpf: cpf,
                cnpj: cnpj,
                email: $("#txt-email").val(),
                senha: generateHash($("#txt-senha").val()),
                tipoUsuario: {
                    idTipoUsuario: 1
                },
                endereco: {
                    idEndereco: null
                },
                subcategoria: {
                    idSubcategoria: $("#slt-subcat").val(),
                },
                valorHora: limpaValor($("#txt-valor-hora").val()),
                resumoQualificacoes: $("#txt-qualificacoes").val()
            };
            console.log(endereco);
            console.log(profissional);
            // this.enableFields(false);
            this.atualizarDadosPro(profissional, endereco);
        }else{
            setTimeout(() => {
                this.mostrarAlerta("alertaAlt", "FALHA NA GRAVAÇÃO");
            }, 200);
        }
    }

    atualizarDadosPro(profissional, endereco){
        let alerta = [];
        const atualizarPro = (profissional) =>{
            axios({
                method: 'PUT',
                url: `${DOMINIO}profissionais/atualizar/id/${profissional.idProfissional}`,
                type: "application/json",
                header: {"token": getToken()},
                timeout: 30000,
                data: 
                {
                    idProfissional: profissional.idProfissional,
                    cnpj: profissional.cnpj,
                    cpf: profissional.cpf,
                    dataNasc: profissional.dataNasc,
                    email: profissional.email,
                    endereco:{
                        idEndereco: endereco.idEndereco
                    },
                    nome: profissional.nome,
                    resumoQualificacoes: profissional.resumoQualificacoes,
                    senha: profissional.senha,
                    subcategoria:{
                        idSubcategoria: profissional.subcategoria.idSubcategoria
                    },
                    tipoUsuario:{
                        idTipoUsuario: profissional.tipoUsuario.idTipoUsuario
                    },
                    valorHora: profissional.valorHora
                }
            })
            .then((response)=>{
                alerta.push(`${profissional.nome}, seus dados foram atualizados com sucesso!`);
                console.log("profissional");
                console.log(response);
                getUpdatedPro(profissional);
                this.setState({erros: alerta});
                this.mostrarAlerta("msgAlt", "SUCESSO");

                setTimeout(() => {
                    this.enableFields(true);                 
                }, 1500);
            })
            .catch((error)=>{
                alerta = [];
                alerta.push("Não foi possível gravar seus dados!");
                alerta.push(error);
                this.mostrarAlerta("erroAlt", "ERRO");
                console.error(error);
            })
            // .onload = this.ModalAlertas();
        }
        
        axios({
            method: 'PUT',
            url: `${DOMINIO}enderecos/atualizar/id/${endereco.idEndereco}`,
            type: "application/json",
            header: {"token": getToken()},
            timeout: 30000,
            data: {
                idEndereco: endereco.idEndereco,
                bairro: endereco.bairro,
                cep: endereco.cep,
                cidade: {
                    idCidade: endereco.cidade.idCidade
                },
                logradouro: endereco.logradouro,
                numero: null
            }
        })
        .then((response)=>{
            let retorno = response.data;
            console.log("endereco");
            console.log(retorno);
            atualizarPro(profissional);
        })
        .catch((error)=>{
            alerta.push("Houve um erro ao tentar gravar seus dados");
            alerta.push(error);
            this.mostrarAlerta("erroAlt", "ERRO");
            console.error(error);
        })
        .onload = this.modalLoad();

    }    

    // **************************************************
    preencherCampos(){
        //VERIFICA SE HÁ ALGUEM LOGADO E QUE SE O O TIPO DE USUARIO É PRO
        let app = sessionStorage.getItem("app");
        
        if(app !== null && app !== ""){
            $(".container-senha").css("display", "none");
            if(app === "cliente"){
                console.log("cliente");
            }else if(app === "profissional"){
                console.log("profissional");
            }
            $("input, select, textarea").attr("disabled", "disabled");
            $("input, select, textarea").css("background-color", "#d5d5d5");
        }else{            
            $(".container-senha").css("display", "flex");
        }

        //BUSCA PRO E ENDERECO CASO USUARIO RETORNA PARA CADASTRO SEM FINALIZA-LO
        let profissional = JSON.parse(sessionStorage.getItem("profissional"));
        let endereco = profissional.endereco;

        this.setState({profissional: profissional});
        
        this.setState({nome: profissional.nome});
        this.setState({dataNasc: formataData(profissional.dataNasc, "-", "/")});
        if(profissional.cpf === "" || profissional.cpf === null){
            this.setState({radioChecked: "rdo-pj"});
            this.setState({tipoPro: "rdo-pj"});
            this.setState({cpfCnpj: profissional.cnpj});
        }else{
            this.setState({radioChecked: "rdo-pf"});
            this.setState({tipoPro: "rdo-pf"});
            this.setState({cpfCnpj: profissional.cpf || profissional.cnpj});
        }
        this.setState({email: profissional.email});
        this.setState({endereco: endereco});
        this.setState({cep: endereco.cep});
        this.getEndereco(endereco.cep);
        this.setState({numero: endereco.numero});
        this.setState({idCidade: endereco.cidade.idCidade});
    }

    //VALIDA O DIGITO VERIFICADOR DO CPF OU CNPJ DIGITADO PELO USUARIO
    setCpfCnpj(event){
        this.setState({cpfCnpj: event.target.value});
        let cpfCnpj = event.target.value;
        if(this.state.radioChecked === "rdo-pf"){
            validarCpfPro(cpfCnpj);
            if(!cpfCnpj.includes("_") && cpfCnpj.length === 14){
                this.getCpf(retirarSimbolos(cpfCnpj));
            }
        }else{
            validarCnpj(cpfCnpj);
            if(!cpfCnpj.includes("_") && cpfCnpj.length === 18){
                this.getCnpj(retirarSimbolos(cpfCnpj));
            }
        }
    }

    getCpf(cpf){
        let erros = [];
        console.log(cpf);
        axios({
            method:"GET",
            url: `${DOMINIO}profissionais/cpf/${cpf}`,
            timeout: 30000
        })
        .then((response)=>{
            let jsonPro = response.data;
            console.log(jsonPro);
            
            const mostraErroCpf = () =>{
                this.jaCadastrado("CPF", cpf, $("#txt-cpfCnpj"))
                this.setState({cpfCnpj: ""});
            }
            
            if(jsonPro !== null && jsonPro !== ''){
                if(getToken() !== null && getToken() !== ""){
                    if(getUsuarioPro().cpf !== jsonPro.cpf && (getUsuarioPro().cpf !== null && getUsuarioPro().cpf !== "")){
                        mostraErroCpf();
                    }
                }else{
                    mostraErroCpf();
                }
            }

            setTimeout(()=>{this.modalLoad();}, 200);
        })
        .catch((error)=>{
            this.noConnection();
            this.modalLoad();
        })
        .onload = this.modalLoad();
    }

    getCnpj(cnpj){
        let erros = [];

        axios({
            method: "GET",
            url: `${DOMINIO}profissionais/cnpj/${cnpj}`,
            timeout: 30000
        })
        .then((response)=>{
            let jsonPro = response.data;
            console.log(jsonPro);
            
            const mostraErroCnpj = () =>{
                this.jaCadastrado("CNPJ", cnpj, $("#txt-cpfCnpj"))
                this.setState({cpfCnpj: ""});
            }
            if(jsonPro !== null && jsonPro !== ''){
                if(getToken() !== null && getToken() !== ""){
                    if(getUsuarioPro().cnpj !== jsonPro.cnpj && (getUsuarioPro().cnpj !== null && getUsuarioPro().cnpj !== "")){
                        mostraErroCnpj();
                    }
                }else {
                    mostraErroCnpj();
                }
            }
            setTimeout(()=>{this.modalLoad()}, 500);
        })
        .catch((error)=>{
            this.noConnection();
            this.modalLoad();
        })
        .onload = this.modalLoad();
    }

    setNome(event){
        this.setState({nome: event.target.value});
        validarString(event.target);
    }

    setData(event){
        this.setState({dataNasc: event.target.value});
        let data = event.target.value;

        if(!data.includes("_") && validarIdade(event.target)){
            withoutError($("#txt-dataNasc"));
        }else{
            withError($("#txt-dataNasc"));
        }
    }

    setEmail(event){
        this.setState({email: event.target.value});
        // this.getEmail(event.target.value);
        validarEmail(event.target);
    }

    getEmail(event){
        // if()
        this.setState({email: event.target.value});
        let email = event.target.value;
        console.log(email);
        if(email.length > 5){
            axios({
                method: "GET",
                url: `${DOMINIO}profissionais/email/${email}`,
                timeout: 30000
            })
            .then((response)=>{
                let jsonPro = response.data;
                console.log(jsonPro);

                const mostraErroEmail = () =>{
                    this.jaCadastrado("E-mail", email, $("#txt-email"));
                    this.setState({email: ""});
                }

                if(jsonPro !== null && jsonPro !== ""){
                    if(getToken() !== null && getToken() !== ""){
                        if(getUsuarioPro().email !== jsonPro.email){
                            mostraErroEmail();
                        }
                    }else {
                        mostraErroEmail();
                    }
                }

                setTimeout(()=>{this.modalLoad()}, 500);
            })
            .catch((error)=>{
                console.log("errorororor");
                this.noConnection();
                this.modalLoad();
            })
            .onload = this.modalLoad();
        }   
    }

    setCep(event){
        this.setState({cep: event.target.value});
        let cepSize = event.target.value.length;
        if (cepSize > 8) {
            this.getEndereco(event.target.value);
        }
    }

    getEndereco = (cep) =>{
        let erros = [];
        
        axios({
            method: "GET",
            url: `https://viacep.com.br/ws/${cep}/json/`,
            type: "application/json",
            timeout: 30000,
        })
        .then((response)=>{
            let jsonEndereco = response.data;
            let cepError = jsonEndereco.erro;
            if(jsonEndereco === null || jsonEndereco === "" || cepError === true){
                this.setState({logradouro: ""});
                this.setState({bairro: ""});
                this.setState({cidade: ""});
                this.setState({uf: ""});
                this.setState({idCidade: ""});
                
                withError($('#txt-cep'));
                withError($('#txt-logradouro'));
                withError($('#txt-cidade'));
                withError($('#txt-bairro'));
                withError($('#txt-uf'));
                this.modalLoad();
                erros.push(`O CEP ${cep} é invalido`);
                this.setState({erros: erros});
                setTimeout(()=>{this.mostrarAlerta("erroAlt", "ERRO");}, 500);
            }else if(cepError !== true){
                this.setState({logradouro: jsonEndereco.logradouro});
                this.setState({bairro: jsonEndereco.bairro});
                this.setState({cidade: jsonEndereco.localidade});
                this.setState({uf: jsonEndereco.uf});
                this.setState({idCidade: jsonEndereco.ibge});

                withoutError($('#txt-cep'));
                withoutError($('#txt-logradouro'));
                withoutError($('#txt-cidade'));
                withoutError($('#txt-bairro'));
                withoutError($('#txt-uf'));
                setTimeout(()=>{this.modalLoad();}, 200);
            }
        })
        .catch((error)=>{
            this.noConnection();

            this.modalLoad();
        })
        .onload = this.modalLoad();
    }

    setSenha(event){
        this.setState({senha: event.target.value});
        let senha = event.target.value;
        validarSenha(senha);
    }

    setConfirmSenha(event){
        this.setState({confirmSenha: event.target.value});
        validarConfirmacaoSenha($('#txt-senha').get(0), event.target);
    }

    setTipoPfPj(event){
        this.setState({radioChecked: event.target.value});

        this.setState({tipoPro: event.target.value})
        setTimeout(()=>{
            console.log(`tipoPro ${this.state.tipoPro}`);
        }, 1000);    
    }
    // **************************************************



    // **************************************************
    preencherCamposServico(){
        let profissional = JSON.parse(sessionStorage.getItem("profissional"));
        
        
        let categoria = profissional.subcategoria.categoria.idCategoria;
        let subcategoria = profissional.subcategoria.idSubcategoria;
        

        console.log(categoria);
        console.log(subcategoria);
        
        this.getCategorias();
        this.setState({idCategoria: categoria});
        this.setState({idSubcategoria: subcategoria});
        this.setState({valorHora: profissional.valorHora});
        this.setState({qualificacoes: profissional.resumoQualificacoes});
        this.getSubcategorias(1);
    }

    setValorHora(event){
        this.setState({valorHora: event.target.value});
    }

    getCategorias(){
        let load = false;
        axios({
            method: "GET",
            url: `${DOMINIO}categorias`,
            type: "application/json",
            timeout: 30000,  
        })
        .then((response)=>{
            let jsonCategorias = response.data;
            this.setState({categorias: jsonCategorias});
            console.log(jsonCategorias);
            if(load){
                console.log("sai cat");
                this.modalLoad();
                load = true;
            }
        })
        .catch((error)=>{
            console.log("++++++++++++");
            this.setState({loading: !this.state.loading});
            console.log("catch cat");
            this.modalLoad();
            this.setState({showModalErro: this.state.showModalErro});
            this.noConnection();
        })
        .onload = this.modalLoad();
    }

    getSubcategorias(idCategoria){

        if(idCategoria === null || idCategoria === ""){
            idCategoria = 1;
        }
        
        // axios.get(`${DOMINIO}subcategorias/categoria/${idCategoria}`)
        axios({
            method: "GET",
            url: `${DOMINIO}subcategorias/categoria/${idCategoria}`,
            type: "application/json",
            timeout: 30000,  
        })
        .then((response)=>{
            let jsonSubcategorias = response.data;
            this.setState({subcategorias: jsonSubcategorias});
            console.log("sai subcat");
            setTimeout(()=>{this.modalLoad()}, 100);
        })
        .catch((error)=>{
            console.error(error);
            console.log("catch subcat");
            this.modalLoad();
            this.noConnection();
        })
        .onload = setTimeout(()=>{this.modalLoad()}, 0);
    }
    // **************************************************

    render(){
        return(
            <Fragment>
                <ModalLoadConst abrir={this.state.loading} onClose={this.modalLoad}/>
                <ModalAlertas tipoAlerta={this.state.tipoAlerta} titulo={this.state.tituloAlerta} erros={this.state.erros} abrir={this.state.showModalErro} onClose={this.ModalAlertas}/>
                <CapaPerfilPro
                    nomePro={this.state.nomePro}
                    servicoPro={this.state.servicoPro}
                    localPro={this.state.localPro}
                    notaPro="Média Geral: 4.9"
                    valorPro={`R$ ${this.state.valorPro}`}
                    fotoPro={this.state.fotoPro}
                />
                <div className="caixa-conteudo-perfil-pro">
                    <div className="container-flex">
                        <form method="POST" name="frm_atualizar_pro" onSubmit={this.setPro}>
                            <div className="caixa-control-perfil flex-center">
                                <BotaoImg 
                                    classBotao="text-editar-perfil flex-center"
                                    idBotao="text-editar-perfil"
                                    typeBotao="button"
                                    clickBotao={this.chamar}
                                    altImg="Editar"
                                    titleImg="Editar"
                                    idImgBotao="img-editar-perfil"
                                    imgBotao={this.state.iconEdit}
                                    />
                                <BotaoImg
                                    classBotao="text-atualizar-perfil flex-center"
                                    idBotao="text-atualizar-perfil"
                                    typeBotao="submit"
                                    // clickBotao={!this.state.atualizar === true ? this.enableFields : ()=>{console.log("ola")}}
                                    altImg="Salvar Dados"
                                    titleImg="Salvar Dados"
                                    idImgBotao="img-atualizar-perfil"
                                    imgBotao={this.state.iconSave}
                                />
                            </div>
                            {/* <DadosPessoaisPro/> */}
                            {/* ************************************************* */}
                            <div className="flex-center">
                                <div className="card-formulario-pessoal">
                                    <div className="caixa-title-card">
                                        <h3 className="title-card-pro">Dados Pessoais</h3>
                                    </div>
                                    <div className="title-card-pjPf">
                                        <Inputs
                                            id="rdo-pf"
                                            type="radio"
                                            name="rdos_pfpj"
                                            label="Pessoa Física:"
                                            classDivInput="caixa-rdo-pf"
                                            forInput="rdo-pf"
                                            onChange={this.setTipoPfPj}
                                            // onChange={(e) => this.setState({ radioChecked: e.target.value })}
                                            radioChecked={this.state.radioChecked === 'rdo-pf'}
                                            valueInput="rdo-pf"
                                        />
                                        <Inputs
                                            id="rdo-pj"
                                            type="radio"
                                            name="rdos_pfpj"
                                            label="Pessoa Jurídica:"
                                            classDivInput="caixa-rdo-pj"
                                            forInput="rdo-pj"
                                            onChange={this.setTipoPfPj}
                                            // onChange={(e) => this.setState({ radioChecked: e.target.value })}
                                            radioChecked={this.state.radioChecked === 'rdo-pj'}
                                            valueInput="rdo-pj"
                                        />
                                    </div>
                                    
                                    <div className="float campos-dados">
                                        <div className="flex-center container-nome-dataNasc">

                                            <Inputs
                                                label="Nome:"
                                                id="txt-nome"
                                                name="txt_nome"
                                                maxLength="100"
                                                type="text"
                                                classDivInput="caixa-nome"
                                                classInput="form-control form-input"
                                                onChange={this.setNome}
                                                valueInput={this.state.nome || ""}
                                            />

                                            <InputNumber
                                                classDivInput="caixa-dataNasc"
                                                label="Data de Nascimento:"
                                                id="txt-dataNasc"
                                                type="text"
                                                name="txt_data_nasc"
                                                mascara="##/##/####"
                                                classInput="form-control form-input"
                                                onChange={this.setData}
                                                valueInput={this.state.dataNasc || ""}
                                                tempMask="_"
                                            />
                                        
                                        </div>
                                        <div className="flex-center container-cpfCnpj-email">

                                            <InputNumber
                                                classDivInput="caixa-cpfCnpj"
                                                label={this.state.tipoPro === "rdo-pf" ? "CPF" : "CNPJ"}
                                                id="txt-cpfCnpj"
                                                type="text"
                                                name="txt_cpfCnpj"
                                                classInput="form-control form-input"
                                                onChange={this.setCpfCnpj}
                                                mascara={this.state.tipoPro === "rdo-pf" ? "###.###.###-##" : "##.###.###/####-##"}
                                                valueInput={this.state.cpfCnpj || ""}
                                                tempMask="_"
                                            />

                                            <Inputs
                                                classDivInput="caixa-email"
                                                label="E-mail:"
                                                maxLength="150"
                                                id="txt-email"
                                                type="email"
                                                name="txt_email"
                                                onChange={this.setEmail}
                                                onBlur={this.getEmail}
                                                classInput="form-control form-input"
                                                valueInput={this.state.email || ""}
                                            />

                                            
                                        </div>
                                        <div className="flex-center container-senha">

                                            <Inputs
                                                classDivInput="caixa-senha"
                                                label="Senha:"
                                                maxLength="130"
                                                id="txt-senha"
                                                type="password"
                                                name="txt_senha"
                                                onChange={this.setSenha}
                                                classInput="form-control form-input"
                                            />

                                            <Inputs
                                                classDivInput="caixa-confirmar-senha"
                                                label="Confirmar Senha:"
                                                maxLength="130"
                                                id="txt-confirmar-senha"
                                                type="password"
                                                name="txt_confirmar_senha"
                                                onChange={this.setConfirmSenha}                           
                                                classInput="form-control form-input"
                                            />

                                        </div>

                                        <div className="flex-center container-cep-logradouro">

                                            <Inputs
                                                classDivInput="caixa-cep"
                                                label="CEP:"
                                                id="txt-cep"
                                                type="text"
                                                name="txt_cep"
                                                onChange={this.setCep}
                                                classInput="form-control form-input"
                                                mascara="99999-999"
                                                valueInput={this.state.cep || ""}
                                            />

                                            <Inputs
                                                classDivInput="caixa-logradouro"
                                                label="Logradouro:"
                                                maxLength="120"
                                                id="txt-logradouro"
                                                type="text"
                                                name="txt_logradouro"
                                                valueInput={this.state.logradouro || ""}
                                                readOnly
                                                classInput="form-control form-input"
                                            />
                                            
                                        </div>
                                        <div className="flex-center container-bairro-cidade-uf">

                                            <Inputs
                                                classDivInput="caixa-bairro"
                                                label="Bairro:"
                                                maxLength="120"
                                                id="txt-bairro"
                                                type="text"
                                                name="txt_bairro"
                                                valueInput={this.state.bairro || ""}
                                                disabled
                                                
                                                classInput="form-control form-input"
                                            />

                                            <Inputs
                                                classDivInput="caixa-cidade"
                                                label="Cidade:"
                                                maxLength="120"
                                                id="txt-cidade"
                                                type="text"
                                                name="txt_cidade"
                                                data={this.state.idCidade}
                                                valueInput={this.state.cidade || ""}
                                                readOnly
                                                
                                                classInput="form-control form-input"
                                            />

                                            <Inputs
                                                classDivInput="caixa-uf"
                                                label="UF:"
                                                maxLength="2"
                                                id="txt-uf"
                                                type="text"
                                                name="txt_uf"
                                                valueInput={this.state.uf || ""}
                                                readOnly
                                                
                                                classInput="form-control form-input"
                                            />
                                            
                                        </div>
                                    </div>
                                </div>
                            </div>
                            {/* ************************************************* */}

                            {/* <DadosProfissional/> */}
                            {/* ************************************************* */}
                            <div className="flex-center">
                                <div className="card-formulario-servico">
                                    <h3 className="title-card">Dados de Serviço</h3>
                                    <div className="flex-center campos-servicos">
                                        <div className="container-servico-pro">
                                            <div className="flex-center container-categoria">
                                                <Selects
                                                    labelSelect="Selecione o Tipo de Serviço:"
                                                    idSelect="slt-categoria"
                                                    nameSelect="slt_categoria"
                                                    classDivSelect="caixa-categoria"
                                                    onChangeSelect={()=>(this.getSubcategorias($("#slt-categoria").find(":selected").val()))}
                                                    optionsSelect={this.state.categorias.map(categoria=>(
                                                        <option key={categoria.idCategoria} value={categoria.idCategoria}
                                                            selected={this.state.idCategoria === categoria.idCategoria ? "selected" : ""}
                                                        >
                                                            {categoria.categoria}
                                                        </option>
                                                        ))}
                                                        firstOption="Tipos de serviços"
                                                    />
                                            </div>
                                            
                                            <div className="flex-center container-subcat">
                                                <Selects
                                                    labelSelect="Selecione um serviço"
                                                    idSelect="slt-subcat"
                                                    nameSelect="slt_subcategoria"
                                                    classDivSelect="caixa-subcat"
                                                    // onChangeSelect={()=>(this.setSubcategoria($("#slt-subcat").find(":selected").val()))}
                                                    optionsSelect={this.state.subcategorias.map(subcategoria=>(
                                                            <option key={subcategoria.idSubcategoria} value={subcategoria.idSubcategoria}
                                                                selected={this.state.idSubcategoria === subcategoria.idSubcategoria ? "selected" : ""} 
                                                            >
                                                                {subcategoria.subcategoria}
                                                            </option>
                                                        ))}
                                                        firstOption="Serviços"
                                                    />
                                            </div>
                                            
                                            <div className="flex-center container-valor-hora">
                                                <InputNumber
                                                    label="Valor/Hora:"
                                                    id="txt-valor-hora"
                                                    classInput="form-control form-input"
                                                    name="txt_valor_hora"
                                                    type="InputNumber"
                                                    classDivInput="caixa-valor-hora"
                                                    separadorMilhar="."
                                                    separadorDecimal=","
                                                    permitirNegativo="false"
                                                    prefixo="R$"
                                                    qtdDecimal="2"
                                                    onChange={this.setValorHora}
                                                    valueInput={this.state.valorHora || ""}
                                                    tempMask="_"
                                                />
                                            </div>
                                        </div>
                                        <div className="container-servico-pro">
                                            <div className="container-qualificacoes">
                                                <div className="float caixa-qualificacoes">
                                                    <label className="form-label">Resumo de Qualificações:</label>
                                                    <textarea 
                                                        id="txt-qualificacoes" 
                                                        className="txt-qualificacoes form-control form-input-pro"
                                                        defaultValue={this.state.qualificacoes || ""}>

                                                    </textarea>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            {/* ************************************************* */}
                        </form>
                    </div>
                    <AvaliacaoPro/>
                </div>
            </Fragment>
        );
    }

}

export default PerfilPro;